{"version":3,"file":"static/js/503.142ef915.chunk.js","mappings":"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","sources":["components/ErrorForm/ErrorForm.styled.jsx","components/ErrorForm/ErrorForm.jsx","redux/selectors.js","components/FormPhoneBook/FormPhoneBook.styled.jsx","components/FormPhoneBook/FormPhoneBook.jsx","components/PhoneBookList/PhoneBookList.styled.jsx","components/PhoneBookList/PhoneBookList.jsx","components/BlockPhone/BlockPhone.jsx","components/Filter/Filter.styles.jsx","components/Filter/Filter.jsx","pages/PhoneBook/Phonebook.styled.jsx","pages/PhoneBook/PhoneBook.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\n\nexport const ErrorText = styled.p`\n  text-align: center;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 2px;\n  border-radius: 1px;\n  width: 200px;\n  color: white;\n  background-color: red;\n`\n","import { ErrorMessage } from \"formik\";\nimport PropTypes from 'prop-types';\nimport { ErrorText } from \"./ErrorForm.styled\";\n\n\nexport default function ErrorForm({name}) {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <ErrorText>{message}</ErrorText>}\n    />\n  )\n}\n\nErrorForm.propTypes = {\n  name: PropTypes.string.isRequired,\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filterValue) => {\n    const normalizedFilter = filterValue.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import { Field } from \"formik\";\nimport styled from \"styled-components\";\n\nexport const Block = styled.div`\n display: block;\n`\n\nexport const LabelForm = styled.label`\n  font-size: 20px;\n  margin-right: 10px;\n`\nexport const Input = styled(Field)`\n  font-size: 16px;\n  padding: 10px;\n  outline: none;\n  border: 1px solid orange;\n  border-radius: 10px;\n`\nexport const Text = styled.p`\n  padding: 0px;\n  line-height: 0px;\n  color: white;\n`\nexport const Button = styled.button`\n  padding: 8px;\n  width: 150px;\n  margin-top: 10px;\n  cursor: pointer;\n  border-radius: 5px;\n  border-color: #ffa500;\n  background-color: #fff;\n  color: orange;\n  font-size: 18px;\n  &:hover,\n  &:focus {\n    background-color: orange;\n    color: #fff;\n  }\n`\nexport const Container = styled.div`\n  width: 300px;\n  margin-left: auto;\n  margin-right: auto;\n  border: 1px solid orange;\n  border-radius: 10px;\n  background-color: orange;\n  padding-bottom: 20px;\n`\n","import { Formik, Form } from \"formik\";\nimport * as yup from 'yup';\nimport { LabelForm, Input, Block, Text, Button,Container } from \"./FormPhoneBook.styled\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectContacts } from \"redux/selectors\";\nimport { Notify } from 'notiflix';\nimport { addContact } from 'redux/contacts/requests';\nimport ErrorForm from \"../ErrorForm/ErrorForm\";\n\nconst initialState = {\n  name: '',\n  number: '',\n}\n\nconst validation = yup.object().shape({\n  name: yup.string().matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, 'Name may contain only letters, apostrophe, dash and spaces.').required('Please fill in the name'),\n  number: yup.string().matches(/^(\\s*)?(\\+)?([- _():=+]?\\d[- _():=+]?){10,14}(\\s*)?$/, 'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +').required('Please fill in the number'),\n});\n\n\nexport default function FormPhoneBook() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n    const handleSubmit = (values,{resetForm}) => {\n      function isDublicateName(values) {\n        return contacts.find(\n          contact => contact.name.toLowerCase() === values.name.toLowerCase()\n        )\n      }\n\n      if (isDublicateName(values)) {\n        return Notify.info(`${values.name} is already in contacts.`)\n      }\n\n      dispatch(addContact(values));\n      resetForm()\n    }\n\n\n\n  return (\n    <Formik\n      initialValues={initialState}\n      validationSchema={validation}\n      onSubmit={handleSubmit}\n    >\n      <Form autoComplete=\"off\">\n        <Container>\n          <Block>\n            <LabelForm><Text>Name</Text>\n              <Input\n                name=\"name\"\n                type=\"text\"\n              />\n            </LabelForm>\n            <ErrorForm name='name'/>\n          </Block>\n          <Block>\n            <LabelForm><Text>Number</Text>\n              <Input\n                type=\"tel\"\n                name=\"number\"\n              />\n            </LabelForm>\n            <ErrorForm name='number'/>\n          </Block>\n        </Container>\n        <Button type=\"submit\">Add contact</Button>\n      </Form>\n    </Formik>\n  )\n}\n","import styled from \"styled-components\";\n\nexport const ListItems = styled.li`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`\nexport const Button = styled.button`\n  margin-top: 10px;\n  cursor: pointer;\n  border-radius: 5px;\n  border-color: orange;\n  background-color: #fff;\n  color: orange;\n  font-size: 14px;\n  margin-top: auto;\n  margin-bottom: auto;\n  &:hover,\n  &:focus {\n    background-color: orange;\n    color: #fff;\n  }\n`\nexport const Text = styled.p`\n  margin-right: 8px;\n  line-height: 0px;\n  font-size: 18px;\n  width: auto;\n  padding: 10px;\n  color: white;\n  border: 1px solid orange;\n  border-radius: 10px;\n  background-color: orange;\n`\n","import { string, number, arrayOf, shape } from 'prop-types'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { deleteContact } from 'redux/contacts/requests';\nimport { selectVisibleContacts } from 'redux/selectors'\nimport { ListItems,Button,Text } from './PhoneBookList.styled'\n\n\nexport default function PhoneBookList() {\n  const contacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n\n  const elements = contacts.map(({ name, number,id }) => (\n     <ListItems key={id}>\n      <Text>{name}: {number}</Text>\n      <Button onClick={() => dispatch(deleteContact(id))}>Delete</Button>\n    </ListItems>\n  ))\n\n  return (\n    <div>{elements}</div>\n  )\n}\n\nPhoneBookList.protoTypes = {\n  events: arrayOf(\n    shape({\n      id: string.isRequired,\n      name: string.isRequired,\n      number: number.isRequired\n    })\n  ).isRequired,\n}\n","const BlockPhone = ({title, children}) => {\n  return (\n    <div>\n      <h2>{title}</h2>\n      {children}\n    </div>\n  )\n}\n\nexport default BlockPhone;\n","import styled from \"styled-components\";\n\nexport const Label = styled.label`\n`\nexport const Input = styled.input`\n  font-size: 16px;\n  padding: 10px;\n  outline: none;\n  border: 1px solid orange;\n  border-radius: 10px;\n  margin-bottom: 10px;\n`\nexport const Text = styled.p`\n  line-height: 0px;\n  font-size: 20px;\n`\n","import { useDispatch, useSelector } from \"react-redux\"\nimport { changeFilter } from \"redux/filter/slice\";\nimport { selectFilter } from \"redux/selectors\";\nimport { Input, Label, Text } from \"./Filter.styles\";\n\n\nexport default function Filter() {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleChange = (e) => {\n    const { value } = e.target;\n    dispatch(changeFilter(value))\n  }\n\n  return (\n    <div>\n      <Label htmlFor=\"filter\"><Text></Text></Label>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleChange}\n        placeholder=\"Find contacts by name\"\n        />\n    </div>\n  )\n}\n","import styled from \"styled-components\";\n\nexport const Message = styled.p`\n  font-weight: 500;\n  padding: 4px;\n  border-radius: 4px;\n  background-color: #13c2c2;\n  color: white;\n`;\n\nexport const Error = styled(Message)`\n    background-color: red;\n`\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { selectError, selectFilter, selectIsLoading, selectVisibleContacts } from \"redux/selectors\";\nimport { useEffect } from \"react\";\n\nimport FormPhoneBook from \"../../components/FormPhoneBook/FormPhoneBook\";\nimport PhoneBookList from \"../../components/PhoneBookList/PhoneBookList\";\nimport BlockPhone from \"../../components/BlockPhone/BlockPhone\";\nimport Filter from \"../../components/Filter/Filter\";\n\nimport { fetchContacts } from \"redux/contacts/requests\";\nimport { Error, Message } from \"./Phonebook.styled\";\nimport Loader from \"shared/Loader/Loader\";\n\nexport default function Phonebook() {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectVisibleContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const filter = useSelector(selectFilter);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n        <BlockPhone title='Phonebook'>\n        <FormPhoneBook />\n        </BlockPhone>\n        <BlockPhone title=\"Contacts\">\n        <Filter />\n        {isLoading && <Loader />}\n        {error && <Error>Something goes wrong. {error}.</Error>}\n        {contacts.length > 0 && <PhoneBookList />}\n        {(filter !== \"\" && contacts.length === 0) && <Message>This name was not found</Message>}\n        </BlockPhone>\n    </div>\n  )\n}\n"],"names":["ErrorText","styled","ErrorForm","name","render","message","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectVisibleContacts","createSelector","filterValue","normalizedFilter","toLowerCase","contact","includes","Block","LabelForm","Input","Field","Text","Button","Container","initialState","number","validation","yup","shape","matches","required","FormPhoneBook","dispatch","useDispatch","useSelector","initialValues","validationSchema","onSubmit","values","resetForm","find","isDublicateName","Notify","addContact","autoComplete","type","ListItems","PhoneBookList","elements","map","id","onClick","deleteContact","protoTypes","events","arrayOf","string","isRequired","title","children","Label","Filter","htmlFor","value","onChange","e","target","changeFilter","placeholder","Message","Error","Phonebook","useEffect","fetchContacts","Loader","length"],"sourceRoot":""}